#!/bin/sh

########### the initial part will be the same for all assignments
set -e    # halt on first error

link=all  # link all binaries by default
linked=no # track whether we linked

case $1 in  
  -nolink) link=none ; shift ;;  # don't link
  -link)   [ -n "$2" ] || { echo "You need to say *what* to link" >&2; exit 1; }
           link="$2" ; shift ; shift ;;  # link only one binary
esac

# use 'gcc' as the C compiler (at home, you could try 'clang')
CC=gcc -1

# the next three lines enable you to compile and link against course software
CFLAGS="-I. -I/csc/411/include -I/usr/local/cii/include -I/usr/local/include"
LIBS="-lcii -lbitpack"    # might add more libraries for some projects
LFLAGS="-L/usr/local/cii/lib -L/usr/local/lib -L/csc/411/lib"

# these flags max out warnings and debug info
FLAGS="-no-pie -g -O -Wall -Wextra -Werror -Wfatal-errors -std=c99 -pedantic"

rm -f *.o  # make sure no object files are left hanging around

case $# in
  0) set *.c ;; # if no args are given, compile all .c files
esac

# compile each argument to a .o file
for cfile 
do
  $CC $FLAGS $CFLAGS -c $cfile
done

########### the middle part is different for each assignment
# link together .o files + libraries to make executable binaries
# using one case statement per executable binary

#NOTE TO SELF: Had to add image.o myself so that it is linked properly
case $link in
  all|um) $CC $FLAGS $LFLAGS -o um um.o memory.o instruction.o bitpack32.o $LIBS 
                  linked=yes ;;
#  all|testing) $CC $FLAGS $LFLAGS -o testing testing.o memory.o instruction.o bitpack32.o $LIBS 
#                  linked=yes ;;
esac

########### the final part is the same for each assignment
# error if asked to link something we didn't recognize
if [ $linked = no ]; then
  case $link in  # if the -link option makes no sense, complain 
    none) ;; # OK, do nothing
    *) echo "`basename $0`: don't know how to link $link" 1>&2 ; exit 1 ;;
  esac
fi
